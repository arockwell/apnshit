// Generated by CoffeeScript 1.4.0
(function() {
  var Apnshit, key, value, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./apnshit/common');
  for (key in _ref) {
    value = _ref[key];
    eval("var " + key + " = value;");
  }

  module.exports = Apnshit = (function(_super) {

    __extends(Apnshit, _super);

    function Apnshit(options) {
      this.current_id = 0;
      this.Notification = require('./apnshit/notification');
      this.options = {
        cert: 'cert.pem',
        certData: null,
        key: 'key.pem',
        keyData: null,
        ca: null,
        pfx: null,
        pfxData: null,
        passphrase: null,
        gateway: 'gateway.push.apple.com',
        port: 2195,
        rejectUnauthorized: true,
        enhanced: true,
        errorCallback: void 0,
        cacheLength: 100,
        autoAdjustCache: true,
        connectionTimeout: 0
      };
      _.extend(this.options, options);
    }

    Apnshit.prototype.connect = function() {
      var _this = this;
      return this.loadKeys().then(function() {
        var options;
        options = {};
        if (_this.pfxData) {
          options.pfx = _this.pfxData;
        } else {
          options.key = _this.keyData;
          options.cert = _this.certData;
          options.ca = _this.options.ca;
        }
        options.passphrase = _this.options.passphrase;
        options.rejectUnauthorized = _this.options.rejectUnauthorized;
        options.socket = new net.Stream();
        return _this.socketConnect(options);
      });
    };

    Apnshit.prototype.defer = function(fn) {
      var d;
      d = Q.defer();
      fn(d.resolve, d.reject);
      return d.promise;
    };

    Apnshit.prototype.loadKeys = function() {
      var _this = this;
      return this.defer(function(resolve, reject) {
        if ((_this.options.pfx != null) || (_this.options.pfxData != null)) {
          if (_this.options.pfxData) {
            _this.pfxData = _this.options.pfxData;
            return resolve();
          } else {
            return fs.readFile(_this.options.pfx, function(err, data) {
              if (err) {
                return reject(err);
              } else {
                _this.pfxData = data;
                return resolve();
              }
            });
          }
        } else {
          if (_this.options.certData) {
            _this.certData = _this.options.certData;
            resolve();
          } else {
            fs.readFile(_this.options.cert, function(err, data) {
              if (err) {
                return reject(err);
              } else {
                _this.certData = data.toString();
                return resolve();
              }
            });
          }
          if (_this.options.keyData) {
            _this.keyData = _this.options.keyData;
            return resolve();
          } else {
            return fs.readFile(_this.options.key, function(err, data) {
              if (err) {
                return reject(err);
              } else {
                _this.keyData = data.toString();
                return resolve();
              }
            });
          }
        }
      });
    };

    Apnshit.prototype.send = function(notification) {
      var data, encoding, message, message_length, position, token,
        _this = this;
      data = void 0;
      encoding = notification.encoding || "utf8";
      message = JSON.stringify(notification);
      message_length = Buffer.byteLength(message, encoding);
      position = 0;
      token = new Buffer(notification.device.replace(/\s/g, ""), "hex");
      return this.connect().then(function() {
        notification._uid = _this.current_id++;
        if (_this.current_id > 0xffffffff) {
          _this.current_id = 0;
        }
        if (_this.options.enhanced) {
          data = new Buffer(1 + 4 + 4 + 2 + token.length + 2 + message_length);
          data[position] = 1;
          position++;
          data.writeUInt32BE(notification._uid, position);
          position += 4;
          data.writeUInt32BE(notification.expiry, position);
          position += 4;
        } else {
          data = new Buffer(1 + 2 + token.length + 2 + message_length);
          data[position] = 0;
          position++;
        }
        data.writeUInt16BE(token.length, position);
        position += 2;
        position += token.copy(data, position, 0);
        data.writeUInt16BE(message_length, position);
        position += 2;
        position += data.write(message, position, encoding);
        return _this.socket.write(data);
      }).done();
    };

    Apnshit.prototype.socketConnect = function(options) {
      var _this = this;
      return this.defer(function(resolve, reject) {
        _this.socket = tls.connect(_this.options.port, _this.options.gateway, options, function() {
          _this.emit("connect");
          return resolve();
        });
        _this.socket.setNoDelay(false);
        _this.socket.setTimeout(_this.options.connectionTimeout);
        _this.socket.on("error", _this.socketError);
        _this.socket.on("timeout", _this.socketTimeout);
        _this.socket.on("data", _this.socketData);
        _this.socket.on("drain", _this.socketDrain);
        _this.socket.on("clientError", _this.socketClientError);
        _this.socket.on("close", _this.socketClose);
        return _this.socket.socket.connect(_this.options.port, _this.options.gateway);
      });
    };

    Apnshit.prototype.socketData = function() {
      return console.log("socket data");
    };

    Apnshit.prototype.socketDrain = function() {
      return console.log("socket drain");
    };

    Apnshit.prototype.socketError = function() {
      return console.log("socket error");
    };

    Apnshit.prototype.socketClientError = function() {
      return console.log("socket client error");
    };

    Apnshit.prototype.socketClose = function() {
      return console.log("socket close");
    };

    Apnshit.prototype.socketTimeout = function() {
      return console.log("socket timeout");
    };

    return Apnshit;

  })(EventEmitter);

}).call(this);
